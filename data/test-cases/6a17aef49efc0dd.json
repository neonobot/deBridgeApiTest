{
  "uid" : "6a17aef49efc0dd",
  "name" : "test_get_tokens_by_chain[Binance Smart Chain (BNB)]",
  "fullName" : "tests.api_tests.tests_de_bridge#test_get_tokens_by_chain",
  "historyId" : "b2f3dac650ee4d128f3bb3c43e25c4bc",
  "time" : {
    "start" : 1686133031434,
    "stop" : 1686133031798,
    "duration" : 364
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: Ожидался status = 200, пришел status = 400. Тело ответа: \n{\"ok\":false,\"data\":null}.",
  "statusTrace" : "network = 'Binance Smart Chain (BNB)'\n\n    @pytest.mark.parametrize(\"network\", networks)\n    def test_get_tokens_by_chain(network):\n        chain_id = de_bridge_keys_data()[network].get('chainId')\n>       DeBridge().get_tokens_by_chain(chain_id=chain_id)\n\ntests/api_tests/tests_de_bridge.py:107: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <serviceCalls.debrdige_service.DeBridge object at 0x7fdff01a9fa0>\nchain_id = 56\n\n    def get_tokens_by_chain(self, chain_id):\n        response = requests.get(f\"{self.url}getTokensByChain?chainId={chain_id}\")\n        logger.info(f\"Отправлен запрос на роут - {response.url}\")\n        logger.info(response.text)\n        print(f\"Отправлен запрос на роут - {response.url}\")\n        print(response.text)\n>       assert response.status_code == 200, f\"Ожидался status = {200}, \" \\\n                                            f\"пришел status = {response.status_code}. \" \\\n                                            f\"Тело ответа: \\n{response.text}.\"\nE       AssertionError: Ожидался status = 200, пришел status = 400. Тело ответа: \nE       {\"ok\":false,\"data\":null}.\n\nserviceCalls/debrdige_service.py:156: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: Ожидался status = 200, пришел status = 400. Тело ответа: \n{\"ok\":false,\"data\":null}.",
    "statusTrace" : "network = 'Binance Smart Chain (BNB)'\n\n    @pytest.mark.parametrize(\"network\", networks)\n    def test_get_tokens_by_chain(network):\n        chain_id = de_bridge_keys_data()[network].get('chainId')\n>       DeBridge().get_tokens_by_chain(chain_id=chain_id)\n\ntests/api_tests/tests_de_bridge.py:107: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <serviceCalls.debrdige_service.DeBridge object at 0x7fdff01a9fa0>\nchain_id = 56\n\n    def get_tokens_by_chain(self, chain_id):\n        response = requests.get(f\"{self.url}getTokensByChain?chainId={chain_id}\")\n        logger.info(f\"Отправлен запрос на роут - {response.url}\")\n        logger.info(response.text)\n        print(f\"Отправлен запрос на роут - {response.url}\")\n        print(response.text)\n>       assert response.status_code == 200, f\"Ожидался status = {200}, \" \\\n                                            f\"пришел status = {response.status_code}. \" \\\n                                            f\"Тело ответа: \\n{response.text}.\"\nE       AssertionError: Ожидался status = 200, пришел status = 400. Тело ответа: \nE       {\"ok\":false,\"data\":null}.\n\nserviceCalls/debrdige_service.py:156: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "d0716298d45d759d",
      "name" : "stdout",
      "source" : "d0716298d45d759d.txt",
      "type" : "text/plain",
      "size" : 144
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "tests.api_tests"
  }, {
    "name" : "suite",
    "value" : "tests_de_bridge"
  }, {
    "name" : "host",
    "value" : "fv-az592-204"
  }, {
    "name" : "thread",
    "value" : "2534-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.api_tests.tests_de_bridge"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "network",
    "value" : "'Binance Smart Chain (BNB)'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "6a17aef49efc0dd.json",
  "parameterValues" : [ "'Binance Smart Chain (BNB)'" ]
}