{
  "uid" : "1a2ac8330e54651a",
  "name" : "test_estimate_bridge_stablecoin_to_not_native[Binance Smart Chain (BNB)-Polygon (MATIC)]",
  "fullName" : "tests.api_tests.tests_de_bridge#test_estimate_bridge_stablecoin_to_not_native",
  "historyId" : "1ccc5d516cc1f20e1a709d4ef644f474",
  "time" : {
    "start" : 1686067759230,
    "stop" : 1686067760082,
    "duration" : 852
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: Ожидался status = 200, пришел status = 400. Тело ответа: \n{\"ok\":false,\"data\":null,\"error\":\"call revert exception [ See: https://links.ethers.org/v5-errors-CALL_EXCEPTION ] (method=\\\"decimals()\\\", data=\\\"0x\\\", errorArgs=null, errorName=null, errorSignature=null, reason=null, code=CALL_EXCEPTION, version=abi/5.7.0)\"}.",
  "statusTrace" : "src_nets = 'Polygon (MATIC)', dst_nets = 'Binance Smart Chain (BNB)'\n\n    @pytest.mark.parametrize(\"src_nets\", networks)\n    @pytest.mark.parametrize(\"dst_nets\", networks)\n    def test_estimate_bridge_stablecoin_to_not_native(src_nets, dst_nets):\n        src_net = de_bridge_keys_data()[src_nets].get('net')\n        dst_net = de_bridge_keys_data()[dst_nets].get('net')\n        src_stable_coin = de_bridge_keys_data()[src_nets].get('stableCoin')\n        dst_not_native_token = de_bridge_keys_data()[dst_nets].get('notNativeToken')\n>       DeBridge().EstimateBridge().estimate_bridge_stablecoin_to_not_native(src_net=src_net, dst_net=dst_net,\n                                                                             src_stable_coin=src_stable_coin,\n                                                                             dst_not_native_token=dst_not_native_token)\n\ntests/api_tests/tests_de_bridge.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <serviceCalls.debrdige_service.DeBridge.EstimateBridge object at 0x7f2eb63fce20>\nsrc_net = 'polygon', dst_net = 'bsc'\nsrc_stable_coin = '0x1af3f329e8be154074d8769d1ffa4ee058b1dbc3'\ndst_not_native_token = '0xf275e1ac303a4c9d987a2c48b8e555a77fec3f1c'\n\n    def estimate_bridge_stablecoin_to_not_native(self, src_net, dst_net, src_stable_coin, dst_not_native_token):\n        response = requests.get(\n            f\"{self.url}?srcNet={src_net}&srcTokenAddress={src_stable_coin}\"\n            f\"&srcTokenAmount=10000&dstNet={dst_net}&dstTokenAddress={dst_not_native_token}\")\n        logger.info(f\"Отправлен запрос на роут - {response.url}\")\n        logger.info(response.text)\n        print(f\"Отправлен запрос на роут - {response.url}\")\n        print(response.text)\n>       assert response.status_code == 200, f\"Ожидался status = {200}, \" \\\n                                            f\"пришел status = {response.status_code}. \" \\\n                                            f\"Тело ответа: \\n{response.text}.\"\nE       AssertionError: Ожидался status = 200, пришел status = 400. Тело ответа: \nE       {\"ok\":false,\"data\":null,\"error\":\"call revert exception [ See: https://links.ethers.org/v5-errors-CALL_EXCEPTION ] (method=\\\"decimals()\\\", data=\\\"0x\\\", errorArgs=null, errorName=null, errorSignature=null, reason=null, code=CALL_EXCEPTION, version=abi/5.7.0)\"}.\n\nserviceCalls/debrdige_service.py:58: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: Ожидался status = 200, пришел status = 400. Тело ответа: \n{\"ok\":false,\"data\":null,\"error\":\"call revert exception [ See: https://links.ethers.org/v5-errors-CALL_EXCEPTION ] (method=\\\"decimals()\\\", data=\\\"0x\\\", errorArgs=null, errorName=null, errorSignature=null, reason=null, code=CALL_EXCEPTION, version=abi/5.7.0)\"}.",
    "statusTrace" : "src_nets = 'Polygon (MATIC)', dst_nets = 'Binance Smart Chain (BNB)'\n\n    @pytest.mark.parametrize(\"src_nets\", networks)\n    @pytest.mark.parametrize(\"dst_nets\", networks)\n    def test_estimate_bridge_stablecoin_to_not_native(src_nets, dst_nets):\n        src_net = de_bridge_keys_data()[src_nets].get('net')\n        dst_net = de_bridge_keys_data()[dst_nets].get('net')\n        src_stable_coin = de_bridge_keys_data()[src_nets].get('stableCoin')\n        dst_not_native_token = de_bridge_keys_data()[dst_nets].get('notNativeToken')\n>       DeBridge().EstimateBridge().estimate_bridge_stablecoin_to_not_native(src_net=src_net, dst_net=dst_net,\n                                                                             src_stable_coin=src_stable_coin,\n                                                                             dst_not_native_token=dst_not_native_token)\n\ntests/api_tests/tests_de_bridge.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <serviceCalls.debrdige_service.DeBridge.EstimateBridge object at 0x7f2eb63fce20>\nsrc_net = 'polygon', dst_net = 'bsc'\nsrc_stable_coin = '0x1af3f329e8be154074d8769d1ffa4ee058b1dbc3'\ndst_not_native_token = '0xf275e1ac303a4c9d987a2c48b8e555a77fec3f1c'\n\n    def estimate_bridge_stablecoin_to_not_native(self, src_net, dst_net, src_stable_coin, dst_not_native_token):\n        response = requests.get(\n            f\"{self.url}?srcNet={src_net}&srcTokenAddress={src_stable_coin}\"\n            f\"&srcTokenAmount=10000&dstNet={dst_net}&dstTokenAddress={dst_not_native_token}\")\n        logger.info(f\"Отправлен запрос на роут - {response.url}\")\n        logger.info(response.text)\n        print(f\"Отправлен запрос на роут - {response.url}\")\n        print(response.text)\n>       assert response.status_code == 200, f\"Ожидался status = {200}, \" \\\n                                            f\"пришел status = {response.status_code}. \" \\\n                                            f\"Тело ответа: \\n{response.text}.\"\nE       AssertionError: Ожидался status = 200, пришел status = 400. Тело ответа: \nE       {\"ok\":false,\"data\":null,\"error\":\"call revert exception [ See: https://links.ethers.org/v5-errors-CALL_EXCEPTION ] (method=\\\"decimals()\\\", data=\\\"0x\\\", errorArgs=null, errorName=null, errorSignature=null, reason=null, code=CALL_EXCEPTION, version=abi/5.7.0)\"}.\n\nserviceCalls/debrdige_service.py:58: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "b0f4fe379889025b",
      "name" : "stdout",
      "source" : "b0f4fe379889025b.txt",
      "type" : "text/plain",
      "size" : 530
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "tests.api_tests"
  }, {
    "name" : "suite",
    "value" : "tests_de_bridge"
  }, {
    "name" : "host",
    "value" : "fv-az620-574"
  }, {
    "name" : "thread",
    "value" : "2540-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.api_tests.tests_de_bridge"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "dst_nets",
    "value" : "'Binance Smart Chain (BNB)'"
  }, {
    "name" : "src_nets",
    "value" : "'Polygon (MATIC)'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "1a2ac8330e54651a.json",
  "parameterValues" : [ "'Binance Smart Chain (BNB)'", "'Polygon (MATIC)'" ]
}