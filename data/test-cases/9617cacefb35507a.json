{
  "uid" : "9617cacefb35507a",
  "name" : "test_get_bridge_tx_native_to_not_native[Arbitrum One (ETH)-Polygon (MATIC)]",
  "fullName" : "tests.api_tests.tests_de_bridge#test_get_bridge_tx_native_to_not_native",
  "historyId" : "f90e519410037206cc605be746bd02bb",
  "time" : {
    "start" : 1686067798334,
    "stop" : 1686067806064,
    "duration" : 7730
  },
  "status" : "broken",
  "statusMessage" : "jsonschema.exceptions.ValidationError: 'transaction' is a required property\n\nFailed validating 'required' in schema['properties']['data']:\n    {'properties': {'address': {'type': 'string'},\n                    'meta_info': {'type': 'array'},\n                    'net': {'type': 'string'},\n                    'transaction': {'properties': {'chainId': {'type': 'integer'},\n                                                   'data': {'type': 'string'},\n                                                   'from': {'type': 'string'},\n                                                   'to': {'type': 'string'},\n                                                   'value': {'type': 'string'}},\n                                    'required': ['from',\n                                                 'to',\n                                                 'value',\n                                                 'data',\n                                                 'chainId'],\n                                    'type': 'object'},\n                    'type': {'type': 'string'}},\n     'required': ['transaction', 'type', 'net', 'address', 'meta_info'],\n     'type': 'object'}\n\nOn instance['data']:\n    {'chainId': 137,\n     'data': '0x4d8160ba000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000021e19e0c9bab240000000000000000000000000000000000000000000000000000000000000000001400000000000000000000000001111111254fb6c44bac0bed2854e76f90643097d00000000000000000000000000000000000000000000000000000000000001600000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000001e1116387000000000000000000000000d5ed26d93129a8b51ac54b40477327f6511824b6000000000000000000000000ef4fb24ad0916217251f553c0596f8edc630eb660000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004687c025200000000000000000000000000b97cd69145e5a9357b2acd6af6c5076380f17afb00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000180000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa84174000000000000000000000000b97cd69145e5a9357b2acd6af6c5076380f17afb000000000000000000000000663dc15d3c1ac63ff12e45ab68fea3f0a883c25100000000000000000000000000000000000000000000021e19e0c9bab240000000000000000000000000000000000000000000000000000000000001e0f2e6f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a500000000000000000000000000000000000000000000000000026700023900a007e5c0d200000000000000000000000000000000000000000000021500014a00001a40410d500b1d8e8ef31e21c99d1db9a6444d3adf1270d0e30db05126aa0a28c7881f1f3462c9af673a79c874cc424c3c0d500b1d8e8ef31e21c99d1db9a6444d3adf1270000438ed1739000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001dc4760bf00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000b97cd69145e5a9357b2acd6af6c5076380f17afb000000000000000000000000000000000000000000000000000000006485f1dd00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf1270000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f00a0c9e75c4800000000000000001a1800000000000000000000000000000000000000000000000000009d00004f02a000000000000000000000000000000000000000000000000000000000e4a8ca25ee63c1e5007b925e617aefd7fb3a93abe3a701135d7a1ba710c2132d05d31c914a87c6611c10748aeb04b58e8f4820a0020444b98f67b77a3d6de6e66af11c87da086ec2132d05d31c914a87c6611c10748aeb04b58e8fbd6015b4000000000000000000000000b97cd69145e5a9357b2acd6af6c5076380f17afb80a06c4eca272791bca1f2de4661ed88a30c99a7a9449aa841741111111254fb6c44bac0bed2854e76f90643097d00000000000000000000000000000000000000000000021e19e0c9bab2400000000000000000000000000000000000000000000000000000000000a36e5de70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000344fbe16ca700000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003200000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000001e11163870000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000209c16a55082a30452c000000000000000000000000000000000000000000000000000000000000a4b100000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000d5ed26d93129a8b51ac54b40477327f6511824b600000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000002600000000000000000000000000000000000000000000000000000000000000014d4d42f0b6def4ce0383636770ef773390d85c61a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000014d5ed26d93129a8b51ac54b40477327f6511824b60000000000000000000000000000000000000000000000000000000000000000000000000000000000000014d5ed26d93129a8b51ac54b40477327f6511824b60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n     'from': '0xd5ed26d93129a8b51ac54b40477327f6511824b6',\n     'to': '0x663DC15D3C1aC63ff12E45Ab68FeA3F0a883C251',\n     'value': '10000500000000000000000'}",
  "statusTrace" : "src_network = 'Polygon (MATIC)', dst_network = 'Arbitrum One (ETH)'\n\n    @pytest.mark.parametrize(\"src_network\", networks)\n    @pytest.mark.parametrize(\"dst_network\", networks)\n    def test_get_bridge_tx_native_to_not_native(src_network, dst_network):\n        src_net = de_bridge_keys_data()[src_network].get('net')\n        dst_net = de_bridge_keys_data()[dst_network].get('net')\n        src_token_address = de_bridge_keys_data()[src_network].get('nativeToken')\n        dst_token_address = de_bridge_keys_data()[dst_network].get('notNativeToken')\n        src_token_amount = 10000\n        dst_chain_recipient_address = de_bridge_keys_data()[dst_network].get('owner')\n        dst_chain_fallback_address = de_bridge_keys_data()[dst_network].get('owner')\n        owner = de_bridge_keys_data()[dst_network].get('owner')\n        if src_net != dst_net:\n>           DeBridge().get_bridge_tx(src_net=src_net, dst_net=dst_net, src_token_address=src_token_address,\n                                     dst_token_address=dst_token_address, src_token_amount=src_token_amount,\n                                     dst_chain_recipient_address=dst_chain_recipient_address,\n                                     dst_chain_fallback_address=dst_chain_fallback_address, owner=owner)\n\ntests/api_tests/tests_de_bridge.py:139: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nserviceCalls/debrdige_service.py:176: in get_bridge_tx\n    validate(json.loads(response.text), get_bridge_tx_schema)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninstance = {'data': {'chainId': 137, 'data': '0x4d8160ba0000000000000000000000000000000000000000000000000000000000000000000000000...d93129a8b51ac54b40477327f6511824b6', 'to': '0x663DC15D3C1aC63ff12E45Ab68FeA3F0a883C251', ...}, 'error': '', 'ok': True}\nschema = {'properties': {'data': {'properties': {'address': {'type': 'string'}, 'meta_info': {'type': 'array'}, 'net': {'type':...ject'}, 'error': {'type': 'string'}, 'ok': {'type': 'boolean'}}, 'required': ['ok', 'data', 'error'], 'type': 'object'}\ncls = <class 'jsonschema.validators.Draft202012Validator'>, args = ()\nkwargs = {}\nvalidator = Draft202012Validator(schema={'properties': {'data': {'properties': {'address': {'type': 'string'}, 'meta_info': {'type...e': 'string'}, 'ok': {'type': 'boolean'}}, 'required': ['ok', 'data', 'error'], 'type': 'object'}, format_checker=None)\nerror = <ValidationError: \"'transaction' is a required property\">\n\n    def validate(instance, schema, cls=None, *args, **kwargs):\n        \"\"\"\n        Validate an instance under the given schema.\n    \n            >>> validate([2, 3, 4], {\"maxItems\": 2})\n            Traceback (most recent call last):\n                ...\n            ValidationError: [2, 3, 4] is too long\n    \n        :func:`~jsonschema.validators.validate` will first verify that the\n        provided schema is itself valid, since not doing so can lead to less\n        obvious error messages and fail in less obvious or consistent ways.\n    \n        If you know you have a valid schema already, especially\n        if you intend to validate multiple instances with\n        the same schema, you likely would prefer using the\n        `jsonschema.protocols.Validator.validate` method directly on a\n        specific validator (e.g. ``Draft20212Validator.validate``).\n    \n    \n        Arguments:\n    \n            instance:\n    \n                The instance to validate\n    \n            schema:\n    \n                The schema to validate with\n    \n            cls (jsonschema.protocols.Validator):\n    \n                The class that will be used to validate the instance.\n    \n        If the ``cls`` argument is not provided, two things will happen\n        in accordance with the specification. First, if the schema has a\n        :kw:`$schema` keyword containing a known meta-schema [#]_ then the\n        proper validator will be used. The specification recommends that\n        all schemas contain :kw:`$schema` properties for this reason. If no\n        :kw:`$schema` property is found, the default validator class is the\n        latest released draft.\n    \n        Any other provided positional and keyword arguments will be passed\n        on when instantiating the ``cls``.\n    \n        Raises:\n    \n            `jsonschema.exceptions.ValidationError`:\n    \n                if the instance is invalid\n    \n            `jsonschema.exceptions.SchemaError`:\n    \n                if the schema itself is invalid\n    \n        .. rubric:: Footnotes\n        .. [#] known by a validator registered with\n            `jsonschema.validators.validates`\n        \"\"\"\n        if cls is None:\n            cls = validator_for(schema)\n    \n        cls.check_schema(schema)\n        validator = cls(schema, *args, **kwargs)\n        error = exceptions.best_match(validator.iter_errors(instance))\n        if error is not None:\n>           raise error\nE           jsonschema.exceptions.ValidationError: 'transaction' is a required property\nE           \nE           Failed validating 'required' in schema['properties']['data']:\nE               {'properties': {'address': {'type': 'string'},\nE                               'meta_info': {'type': 'array'},\nE                               'net': {'type': 'string'},\nE                               'transaction': {'properties': {'chainId': {'type': 'integer'},\nE                                                              'data': {'type': 'string'},\nE                                                              'from': {'type': 'string'},\nE                                                              'to': {'type': 'string'},\nE                                                              'value': {'type': 'string'}},\nE                                               'required': ['from',\nE                                                            'to',\nE                                                            'value',\nE                                                            'data',\nE                                                            'chainId'],\nE                                               'type': 'object'},\nE                               'type': {'type': 'string'}},\nE                'required': ['transaction', 'type', 'net', 'address', 'meta_info'],\nE                'type': 'object'}\nE           \nE           On instance['data']:\nE               {'chainId': 137,\nE                'data': '0x4d8160ba000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000021e19e0c9bab240000000000000000000000000000000000000000000000000000000000000000001400000000000000000000000001111111254fb6c44bac0bed2854e76f90643097d00000000000000000000000000000000000000000000000000000000000001600000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000001e1116387000000000000000000000000d5ed26d93129a8b51ac54b40477327f6511824b6000000000000000000000000ef4fb24ad0916217251f553c0596f8edc630eb660000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004687c025200000000000000000000000000b97cd69145e5a9357b2acd6af6c5076380f17afb00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000180000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa84174000000000000000000000000b97cd69145e5a9357b2acd6af6c5076380f17afb000000000000000000000000663dc15d3c1ac63ff12e45ab68fea3f0a883c25100000000000000000000000000000000000000000000021e19e0c9bab240000000000000000000000000000000000000000000000000000000000001e0f2e6f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a500000000000000000000000000000000000000000000000000026700023900a007e5c0d200000000000000000000000000000000000000000000021500014a00001a40410d500b1d8e8ef31e21c99d1db9a6444d3adf1270d0e30db05126aa0a28c7881f1f3462c9af673a79c874cc424c3c0d500b1d8e8ef31e21c99d1db9a6444d3adf1270000438ed1739000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001dc4760bf00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000b97cd69145e5a9357b2acd6af6c5076380f17afb000000000000000000000000000000000000000000000000000000006485f1dd00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf1270000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f00a0c9e75c4800000000000000001a1800000000000000000000000000000000000000000000000000009d00004f02a000000000000000000000000000000000000000000000000000000000e4a8ca25ee63c1e5007b925e617aefd7fb3a93abe3a701135d7a1ba710c2132d05d31c914a87c6611c10748aeb04b58e8f4820a0020444b98f67b77a3d6de6e66af11c87da086ec2132d05d31c914a87c6611c10748aeb04b58e8fbd6015b4000000000000000000000000b97cd69145e5a9357b2acd6af6c5076380f17afb80a06c4eca272791bca1f2de4661ed88a30c99a7a9449aa841741111111254fb6c44bac0bed2854e76f90643097d00000000000000000000000000000000000000000000021e19e0c9bab2400000000000000000000000000000000000000000000000000000000000a36e5de70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000344fbe16ca700000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003200000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000001e11163870000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000209c16a55082a30452c000000000000000000000000000000000000000000000000000000000000a4b100000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000d5ed26d93129a8b51ac54b40477327f6511824b600000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000002600000000000000000000000000000000000000000000000000000000000000014d4d42f0b6def4ce0383636770ef773390d85c61a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000014d5ed26d93129a8b51ac54b40477327f6511824b60000000000000000000000000000000000000000000000000000000000000000000000000000000000000014d5ed26d93129a8b51ac54b40477327f6511824b60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\nE                'from': '0xd5ed26d93129a8b51ac54b40477327f6511824b6',\nE                'to': '0x663DC15D3C1aC63ff12E45Ab68FeA3F0a883C251',\nE                'value': '10000500000000000000000'}\n\n/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/jsonschema/validators.py:1121: ValidationError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "jsonschema.exceptions.ValidationError: 'transaction' is a required property\n\nFailed validating 'required' in schema['properties']['data']:\n    {'properties': {'address': {'type': 'string'},\n                    'meta_info': {'type': 'array'},\n                    'net': {'type': 'string'},\n                    'transaction': {'properties': {'chainId': {'type': 'integer'},\n                                                   'data': {'type': 'string'},\n                                                   'from': {'type': 'string'},\n                                                   'to': {'type': 'string'},\n                                                   'value': {'type': 'string'}},\n                                    'required': ['from',\n                                                 'to',\n                                                 'value',\n                                                 'data',\n                                                 'chainId'],\n                                    'type': 'object'},\n                    'type': {'type': 'string'}},\n     'required': ['transaction', 'type', 'net', 'address', 'meta_info'],\n     'type': 'object'}\n\nOn instance['data']:\n    {'chainId': 137,\n     'data': '0x4d8160ba000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000021e19e0c9bab240000000000000000000000000000000000000000000000000000000000000000001400000000000000000000000001111111254fb6c44bac0bed2854e76f90643097d00000000000000000000000000000000000000000000000000000000000001600000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000001e1116387000000000000000000000000d5ed26d93129a8b51ac54b40477327f6511824b6000000000000000000000000ef4fb24ad0916217251f553c0596f8edc630eb660000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004687c025200000000000000000000000000b97cd69145e5a9357b2acd6af6c5076380f17afb00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000180000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa84174000000000000000000000000b97cd69145e5a9357b2acd6af6c5076380f17afb000000000000000000000000663dc15d3c1ac63ff12e45ab68fea3f0a883c25100000000000000000000000000000000000000000000021e19e0c9bab240000000000000000000000000000000000000000000000000000000000001e0f2e6f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a500000000000000000000000000000000000000000000000000026700023900a007e5c0d200000000000000000000000000000000000000000000021500014a00001a40410d500b1d8e8ef31e21c99d1db9a6444d3adf1270d0e30db05126aa0a28c7881f1f3462c9af673a79c874cc424c3c0d500b1d8e8ef31e21c99d1db9a6444d3adf1270000438ed1739000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001dc4760bf00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000b97cd69145e5a9357b2acd6af6c5076380f17afb000000000000000000000000000000000000000000000000000000006485f1dd00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf1270000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f00a0c9e75c4800000000000000001a1800000000000000000000000000000000000000000000000000009d00004f02a000000000000000000000000000000000000000000000000000000000e4a8ca25ee63c1e5007b925e617aefd7fb3a93abe3a701135d7a1ba710c2132d05d31c914a87c6611c10748aeb04b58e8f4820a0020444b98f67b77a3d6de6e66af11c87da086ec2132d05d31c914a87c6611c10748aeb04b58e8fbd6015b4000000000000000000000000b97cd69145e5a9357b2acd6af6c5076380f17afb80a06c4eca272791bca1f2de4661ed88a30c99a7a9449aa841741111111254fb6c44bac0bed2854e76f90643097d00000000000000000000000000000000000000000000021e19e0c9bab2400000000000000000000000000000000000000000000000000000000000a36e5de70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000344fbe16ca700000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003200000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000001e11163870000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000209c16a55082a30452c000000000000000000000000000000000000000000000000000000000000a4b100000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000d5ed26d93129a8b51ac54b40477327f6511824b600000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000002600000000000000000000000000000000000000000000000000000000000000014d4d42f0b6def4ce0383636770ef773390d85c61a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000014d5ed26d93129a8b51ac54b40477327f6511824b60000000000000000000000000000000000000000000000000000000000000000000000000000000000000014d5ed26d93129a8b51ac54b40477327f6511824b60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n     'from': '0xd5ed26d93129a8b51ac54b40477327f6511824b6',\n     'to': '0x663DC15D3C1aC63ff12E45Ab68FeA3F0a883C251',\n     'value': '10000500000000000000000'}",
    "statusTrace" : "src_network = 'Polygon (MATIC)', dst_network = 'Arbitrum One (ETH)'\n\n    @pytest.mark.parametrize(\"src_network\", networks)\n    @pytest.mark.parametrize(\"dst_network\", networks)\n    def test_get_bridge_tx_native_to_not_native(src_network, dst_network):\n        src_net = de_bridge_keys_data()[src_network].get('net')\n        dst_net = de_bridge_keys_data()[dst_network].get('net')\n        src_token_address = de_bridge_keys_data()[src_network].get('nativeToken')\n        dst_token_address = de_bridge_keys_data()[dst_network].get('notNativeToken')\n        src_token_amount = 10000\n        dst_chain_recipient_address = de_bridge_keys_data()[dst_network].get('owner')\n        dst_chain_fallback_address = de_bridge_keys_data()[dst_network].get('owner')\n        owner = de_bridge_keys_data()[dst_network].get('owner')\n        if src_net != dst_net:\n>           DeBridge().get_bridge_tx(src_net=src_net, dst_net=dst_net, src_token_address=src_token_address,\n                                     dst_token_address=dst_token_address, src_token_amount=src_token_amount,\n                                     dst_chain_recipient_address=dst_chain_recipient_address,\n                                     dst_chain_fallback_address=dst_chain_fallback_address, owner=owner)\n\ntests/api_tests/tests_de_bridge.py:139: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nserviceCalls/debrdige_service.py:176: in get_bridge_tx\n    validate(json.loads(response.text), get_bridge_tx_schema)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninstance = {'data': {'chainId': 137, 'data': '0x4d8160ba0000000000000000000000000000000000000000000000000000000000000000000000000...d93129a8b51ac54b40477327f6511824b6', 'to': '0x663DC15D3C1aC63ff12E45Ab68FeA3F0a883C251', ...}, 'error': '', 'ok': True}\nschema = {'properties': {'data': {'properties': {'address': {'type': 'string'}, 'meta_info': {'type': 'array'}, 'net': {'type':...ject'}, 'error': {'type': 'string'}, 'ok': {'type': 'boolean'}}, 'required': ['ok', 'data', 'error'], 'type': 'object'}\ncls = <class 'jsonschema.validators.Draft202012Validator'>, args = ()\nkwargs = {}\nvalidator = Draft202012Validator(schema={'properties': {'data': {'properties': {'address': {'type': 'string'}, 'meta_info': {'type...e': 'string'}, 'ok': {'type': 'boolean'}}, 'required': ['ok', 'data', 'error'], 'type': 'object'}, format_checker=None)\nerror = <ValidationError: \"'transaction' is a required property\">\n\n    def validate(instance, schema, cls=None, *args, **kwargs):\n        \"\"\"\n        Validate an instance under the given schema.\n    \n            >>> validate([2, 3, 4], {\"maxItems\": 2})\n            Traceback (most recent call last):\n                ...\n            ValidationError: [2, 3, 4] is too long\n    \n        :func:`~jsonschema.validators.validate` will first verify that the\n        provided schema is itself valid, since not doing so can lead to less\n        obvious error messages and fail in less obvious or consistent ways.\n    \n        If you know you have a valid schema already, especially\n        if you intend to validate multiple instances with\n        the same schema, you likely would prefer using the\n        `jsonschema.protocols.Validator.validate` method directly on a\n        specific validator (e.g. ``Draft20212Validator.validate``).\n    \n    \n        Arguments:\n    \n            instance:\n    \n                The instance to validate\n    \n            schema:\n    \n                The schema to validate with\n    \n            cls (jsonschema.protocols.Validator):\n    \n                The class that will be used to validate the instance.\n    \n        If the ``cls`` argument is not provided, two things will happen\n        in accordance with the specification. First, if the schema has a\n        :kw:`$schema` keyword containing a known meta-schema [#]_ then the\n        proper validator will be used. The specification recommends that\n        all schemas contain :kw:`$schema` properties for this reason. If no\n        :kw:`$schema` property is found, the default validator class is the\n        latest released draft.\n    \n        Any other provided positional and keyword arguments will be passed\n        on when instantiating the ``cls``.\n    \n        Raises:\n    \n            `jsonschema.exceptions.ValidationError`:\n    \n                if the instance is invalid\n    \n            `jsonschema.exceptions.SchemaError`:\n    \n                if the schema itself is invalid\n    \n        .. rubric:: Footnotes\n        .. [#] known by a validator registered with\n            `jsonschema.validators.validates`\n        \"\"\"\n        if cls is None:\n            cls = validator_for(schema)\n    \n        cls.check_schema(schema)\n        validator = cls(schema, *args, **kwargs)\n        error = exceptions.best_match(validator.iter_errors(instance))\n        if error is not None:\n>           raise error\nE           jsonschema.exceptions.ValidationError: 'transaction' is a required property\nE           \nE           Failed validating 'required' in schema['properties']['data']:\nE               {'properties': {'address': {'type': 'string'},\nE                               'meta_info': {'type': 'array'},\nE                               'net': {'type': 'string'},\nE                               'transaction': {'properties': {'chainId': {'type': 'integer'},\nE                                                              'data': {'type': 'string'},\nE                                                              'from': {'type': 'string'},\nE                                                              'to': {'type': 'string'},\nE                                                              'value': {'type': 'string'}},\nE                                               'required': ['from',\nE                                                            'to',\nE                                                            'value',\nE                                                            'data',\nE                                                            'chainId'],\nE                                               'type': 'object'},\nE                               'type': {'type': 'string'}},\nE                'required': ['transaction', 'type', 'net', 'address', 'meta_info'],\nE                'type': 'object'}\nE           \nE           On instance['data']:\nE               {'chainId': 137,\nE                'data': '0x4d8160ba000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000021e19e0c9bab240000000000000000000000000000000000000000000000000000000000000000001400000000000000000000000001111111254fb6c44bac0bed2854e76f90643097d00000000000000000000000000000000000000000000000000000000000001600000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000001e1116387000000000000000000000000d5ed26d93129a8b51ac54b40477327f6511824b6000000000000000000000000ef4fb24ad0916217251f553c0596f8edc630eb660000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004687c025200000000000000000000000000b97cd69145e5a9357b2acd6af6c5076380f17afb00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000180000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa84174000000000000000000000000b97cd69145e5a9357b2acd6af6c5076380f17afb000000000000000000000000663dc15d3c1ac63ff12e45ab68fea3f0a883c25100000000000000000000000000000000000000000000021e19e0c9bab240000000000000000000000000000000000000000000000000000000000001e0f2e6f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a500000000000000000000000000000000000000000000000000026700023900a007e5c0d200000000000000000000000000000000000000000000021500014a00001a40410d500b1d8e8ef31e21c99d1db9a6444d3adf1270d0e30db05126aa0a28c7881f1f3462c9af673a79c874cc424c3c0d500b1d8e8ef31e21c99d1db9a6444d3adf1270000438ed1739000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001dc4760bf00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000b97cd69145e5a9357b2acd6af6c5076380f17afb000000000000000000000000000000000000000000000000000000006485f1dd00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf1270000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f00a0c9e75c4800000000000000001a1800000000000000000000000000000000000000000000000000009d00004f02a000000000000000000000000000000000000000000000000000000000e4a8ca25ee63c1e5007b925e617aefd7fb3a93abe3a701135d7a1ba710c2132d05d31c914a87c6611c10748aeb04b58e8f4820a0020444b98f67b77a3d6de6e66af11c87da086ec2132d05d31c914a87c6611c10748aeb04b58e8fbd6015b4000000000000000000000000b97cd69145e5a9357b2acd6af6c5076380f17afb80a06c4eca272791bca1f2de4661ed88a30c99a7a9449aa841741111111254fb6c44bac0bed2854e76f90643097d00000000000000000000000000000000000000000000021e19e0c9bab2400000000000000000000000000000000000000000000000000000000000a36e5de70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000344fbe16ca700000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003200000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000001e11163870000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000209c16a55082a30452c000000000000000000000000000000000000000000000000000000000000a4b100000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000d5ed26d93129a8b51ac54b40477327f6511824b600000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000002600000000000000000000000000000000000000000000000000000000000000014d4d42f0b6def4ce0383636770ef773390d85c61a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000014d5ed26d93129a8b51ac54b40477327f6511824b60000000000000000000000000000000000000000000000000000000000000000000000000000000000000014d5ed26d93129a8b51ac54b40477327f6511824b60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\nE                'from': '0xd5ed26d93129a8b51ac54b40477327f6511824b6',\nE                'to': '0x663DC15D3C1aC63ff12E45Ab68FeA3F0a883C251',\nE                'value': '10000500000000000000000'}\n\n/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/jsonschema/validators.py:1121: ValidationError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "714bea81c33cf529",
      "name" : "stdout",
      "source" : "714bea81c33cf529.txt",
      "type" : "text/plain",
      "size" : 5523
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "tests.api_tests"
  }, {
    "name" : "suite",
    "value" : "tests_de_bridge"
  }, {
    "name" : "host",
    "value" : "fv-az620-574"
  }, {
    "name" : "thread",
    "value" : "2537-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.api_tests.tests_de_bridge"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "dst_network",
    "value" : "'Arbitrum One (ETH)'"
  }, {
    "name" : "src_network",
    "value" : "'Polygon (MATIC)'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "9617cacefb35507a.json",
  "parameterValues" : [ "'Arbitrum One (ETH)'", "'Polygon (MATIC)'" ]
}