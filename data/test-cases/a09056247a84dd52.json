{
  "uid" : "a09056247a84dd52",
  "name" : "test_get_bridge_tx_not_native_to_native[Avalanche (AVAX)-Arbitrum One (ETH)]",
  "fullName" : "tests.api_tests.tests_de_bridge#test_get_bridge_tx_not_native_to_native",
  "historyId" : "cae94c6e096814b48265603f69345592",
  "time" : {
    "start" : 1685619227699,
    "stop" : 1685619228302,
    "duration" : 603
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: Ожидался status = 200, пришел status = 400. Тело ответа: \n{\"ok\":false,\"data\":null,\"error\":\"\\\"owner\\\" is required\"}.",
  "statusTrace" : "src_network = 'Arbitrum One (ETH)', dst_network = 'Avalanche (AVAX)'\n\n    @pytest.mark.parametrize(\"src_network\", networks)\n    @pytest.mark.parametrize(\"dst_network\", networks)\n    def test_get_bridge_tx_not_native_to_native(src_network, dst_network):\n        src_net = de_bridge_keys_data()[src_network].get('net')\n        dst_net = de_bridge_keys_data()[dst_network].get('net')\n        src_token_address = de_bridge_keys_data()[src_network].get('notNativeToken')\n        dst_token_address = de_bridge_keys_data()[dst_network].get('nativeToken')\n        src_token_amount = 1\n        dst_chain_recipient_address = de_bridge_keys_data()[dst_network].get('owner')\n        dst_chain_fallback_address = de_bridge_keys_data()[dst_network].get('owner')\n        if src_net != dst_net:\n>           DeBridge().get_bridge_tx(src_net=src_net, dst_net=dst_net, src_token_address=src_token_address,\n                                     dst_token_address=dst_token_address, src_token_amount=src_token_amount,\n                                     dst_chain_recipient_address=dst_chain_recipient_address,\n                                     dst_chain_fallback_address=dst_chain_fallback_address)\n\ntests/api_tests/tests_de_bridge.py:135: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <serviceCalls.debrdige_service.DeBridge object at 0x10d1a3f70>\nsrc_net = 'arbitrum', dst_net = 'avalanche'\nsrc_token_address = '0xd4d42f0b6def4ce0383636770ef773390d85c61a'\ndst_token_address = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee'\nsrc_token_amount = 1\ndst_chain_recipient_address = '0xd5ed26d93129a8b51ac54b40477327f6511824b6'\ndst_chain_fallback_address = '0xd5ed26d93129a8b51ac54b40477327f6511824b6'\n\n    def get_bridge_tx(self, src_net, dst_net, src_token_address, dst_token_address, src_token_amount,\n                      dst_chain_recipient_address, dst_chain_fallback_address):\n        response = requests.get(\n            f\"{self.url}getBridgeTx?srcNet={src_net}&srcTokenAddress={src_token_address}&\"\n            f\"srcTokenAmount={src_token_amount}&dstNet={dst_net}&dstTokenAddress={dst_token_address}&\"\n            f\"dstChainRecipientAddress={dst_chain_recipient_address}&\"\n            f\"dstChainFallbackAddress={dst_chain_fallback_address}\")\n        logger.info(f\"Отправлен запрос на роут - {response.url}\")\n        logger.info(response.text)\n>       assert response.status_code == 200, f\"Ожидался status = {200}, \" \\\n                                            f\"пришел status = {response.status_code}. \" \\\n                                            f\"Тело ответа: \\n{response.text}.\"\nE       AssertionError: Ожидался status = 200, пришел status = 400. Тело ответа: \nE       {\"ok\":false,\"data\":null,\"error\":\"\\\"owner\\\" is required\"}.\n\nserviceCalls/debrdige_service.py:136: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: Ожидался status = 200, пришел status = 400. Тело ответа: \n{\"ok\":false,\"data\":null,\"error\":\"\\\"owner\\\" is required\"}.",
    "statusTrace" : "src_network = 'Arbitrum One (ETH)', dst_network = 'Avalanche (AVAX)'\n\n    @pytest.mark.parametrize(\"src_network\", networks)\n    @pytest.mark.parametrize(\"dst_network\", networks)\n    def test_get_bridge_tx_not_native_to_native(src_network, dst_network):\n        src_net = de_bridge_keys_data()[src_network].get('net')\n        dst_net = de_bridge_keys_data()[dst_network].get('net')\n        src_token_address = de_bridge_keys_data()[src_network].get('notNativeToken')\n        dst_token_address = de_bridge_keys_data()[dst_network].get('nativeToken')\n        src_token_amount = 1\n        dst_chain_recipient_address = de_bridge_keys_data()[dst_network].get('owner')\n        dst_chain_fallback_address = de_bridge_keys_data()[dst_network].get('owner')\n        if src_net != dst_net:\n>           DeBridge().get_bridge_tx(src_net=src_net, dst_net=dst_net, src_token_address=src_token_address,\n                                     dst_token_address=dst_token_address, src_token_amount=src_token_amount,\n                                     dst_chain_recipient_address=dst_chain_recipient_address,\n                                     dst_chain_fallback_address=dst_chain_fallback_address)\n\ntests/api_tests/tests_de_bridge.py:135: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <serviceCalls.debrdige_service.DeBridge object at 0x10d1a3f70>\nsrc_net = 'arbitrum', dst_net = 'avalanche'\nsrc_token_address = '0xd4d42f0b6def4ce0383636770ef773390d85c61a'\ndst_token_address = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee'\nsrc_token_amount = 1\ndst_chain_recipient_address = '0xd5ed26d93129a8b51ac54b40477327f6511824b6'\ndst_chain_fallback_address = '0xd5ed26d93129a8b51ac54b40477327f6511824b6'\n\n    def get_bridge_tx(self, src_net, dst_net, src_token_address, dst_token_address, src_token_amount,\n                      dst_chain_recipient_address, dst_chain_fallback_address):\n        response = requests.get(\n            f\"{self.url}getBridgeTx?srcNet={src_net}&srcTokenAddress={src_token_address}&\"\n            f\"srcTokenAmount={src_token_amount}&dstNet={dst_net}&dstTokenAddress={dst_token_address}&\"\n            f\"dstChainRecipientAddress={dst_chain_recipient_address}&\"\n            f\"dstChainFallbackAddress={dst_chain_fallback_address}\")\n        logger.info(f\"Отправлен запрос на роут - {response.url}\")\n        logger.info(response.text)\n>       assert response.status_code == 200, f\"Ожидался status = {200}, \" \\\n                                            f\"пришел status = {response.status_code}. \" \\\n                                            f\"Тело ответа: \\n{response.text}.\"\nE       AssertionError: Ожидался status = 200, пришел status = 400. Тело ответа: \nE       {\"ok\":false,\"data\":null,\"error\":\"\\\"owner\\\" is required\"}.\n\nserviceCalls/debrdige_service.py:136: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "8bc2741a89efc0cc",
      "name" : "log",
      "source" : "8bc2741a89efc0cc.txt",
      "type" : "text/plain",
      "size" : 512
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "tests.api_tests"
  }, {
    "name" : "suite",
    "value" : "tests_de_bridge"
  }, {
    "name" : "host",
    "value" : "MacBook-Air-Anna.local"
  }, {
    "name" : "thread",
    "value" : "18939-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.api_tests.tests_de_bridge"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "dst_network",
    "value" : "'Avalanche (AVAX)'"
  }, {
    "name" : "src_network",
    "value" : "'Arbitrum One (ETH)'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "af085b24fd01c334",
      "status" : "failed",
      "statusDetails" : "AssertionError: Ожидался status = 200, пришел status = 400. Тело ответа: \n{\"ok\":false,\"data\":null,\"error\":\"\\\"executionFeeAmount\\\" is required\"}.",
      "time" : {
        "start" : 1685615517460,
        "stop" : 1685615517830,
        "duration" : 370
      }
    }, {
      "uid" : "dde6291bc28884dc",
      "status" : "failed",
      "statusDetails" : "AssertionError: Ожидался status = 200, пришел status = 400. Тело ответа: \n{\"ok\":false,\"data\":null,\"error\":\"Request failed with status code 429\"}.",
      "time" : {
        "start" : 1685610434040,
        "stop" : 1685610434502,
        "duration" : 462
      }
    } ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "a09056247a84dd52.json",
  "parameterValues" : [ "'Avalanche (AVAX)'", "'Arbitrum One (ETH)'" ]
}