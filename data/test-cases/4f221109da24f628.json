{
  "uid" : "4f221109da24f628",
  "name" : "test_estimate_bridge_not_native_to_native[Avalanche (AVAX)]",
  "fullName" : "tests.api_tests.tests_de_bridge#test_estimate_bridge_not_native_to_native",
  "historyId" : "f6cf733156a884c54bd3b5ec58940fb0",
  "time" : {
    "start" : 1685615507641,
    "stop" : 1685615508311,
    "duration" : 670
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: Ожидался status = 200, пришел status = 400. Тело ответа: \n{\"ok\":false,\"data\":null,\"error\":\"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee is incorrect token address(dstChainTokenOut)\"}.",
  "statusTrace" : "network = 'Avalanche (AVAX)'\n\n    @pytest.mark.parametrize(\"network\", networks)\n    def test_estimate_bridge_not_native_to_native(network):\n        net = de_bridge_keys_data()[network].get('net')\n        native_token = de_bridge_keys_data()[network].get('nativeToken')\n        not_native_token = de_bridge_keys_data()[network].get('notNativeToken')\n>       DeBridge().EstimateBridge().estimate_bridge_not_native_to_native(net=net, native_token=native_token,\n                                                                         not_native_token=not_native_token)\n\ntests/api_tests/tests_de_bridge.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <serviceCalls.debrdige_service.DeBridge.EstimateBridge object at 0x10f3e19a0>\nnet = 'avalanche'\nnot_native_token = '0xe896cdeaac9615145c0ca09c8cd5c25bced6384c'\nnative_token = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee'\n\n    def estimate_bridge_not_native_to_native(self, net, not_native_token, native_token):\n        response = requests.get(\n            f\"{self.url}?srcNet={net}&srcTokenAddress={not_native_token}\"\n            f\"&srcTokenAmount=1&dstNet={net}&dstTokenAddress={native_token}\")\n        logger.info(f\"Отправлен запрос на роут - {response.url}\")\n        logger.info(response.text)\n>       assert response.status_code == 200, f\"Ожидался status = {200}, \" \\\n                                            f\"пришел status = {response.status_code}. \" \\\n                                            f\"Тело ответа: \\n{response.text}.\"\nE       AssertionError: Ожидался status = 200, пришел status = 400. Тело ответа: \nE       {\"ok\":false,\"data\":null,\"error\":\"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee is incorrect token address(dstChainTokenOut)\"}.\n\nserviceCalls/debrdige_service.py:65: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: Ожидался status = 200, пришел status = 400. Тело ответа: \n{\"ok\":false,\"data\":null,\"error\":\"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee is incorrect token address(dstChainTokenOut)\"}.",
    "statusTrace" : "network = 'Avalanche (AVAX)'\n\n    @pytest.mark.parametrize(\"network\", networks)\n    def test_estimate_bridge_not_native_to_native(network):\n        net = de_bridge_keys_data()[network].get('net')\n        native_token = de_bridge_keys_data()[network].get('nativeToken')\n        not_native_token = de_bridge_keys_data()[network].get('notNativeToken')\n>       DeBridge().EstimateBridge().estimate_bridge_not_native_to_native(net=net, native_token=native_token,\n                                                                         not_native_token=not_native_token)\n\ntests/api_tests/tests_de_bridge.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <serviceCalls.debrdige_service.DeBridge.EstimateBridge object at 0x10f3e19a0>\nnet = 'avalanche'\nnot_native_token = '0xe896cdeaac9615145c0ca09c8cd5c25bced6384c'\nnative_token = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee'\n\n    def estimate_bridge_not_native_to_native(self, net, not_native_token, native_token):\n        response = requests.get(\n            f\"{self.url}?srcNet={net}&srcTokenAddress={not_native_token}\"\n            f\"&srcTokenAmount=1&dstNet={net}&dstTokenAddress={native_token}\")\n        logger.info(f\"Отправлен запрос на роут - {response.url}\")\n        logger.info(response.text)\n>       assert response.status_code == 200, f\"Ожидался status = {200}, \" \\\n                                            f\"пришел status = {response.status_code}. \" \\\n                                            f\"Тело ответа: \\n{response.text}.\"\nE       AssertionError: Ожидался status = 200, пришел status = 400. Тело ответа: \nE       {\"ok\":false,\"data\":null,\"error\":\"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee is incorrect token address(dstChainTokenOut)\"}.\n\nserviceCalls/debrdige_service.py:65: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "f706fef5e5c81271",
      "name" : "log",
      "source" : "f706fef5e5c81271.txt",
      "type" : "text/plain",
      "size" : 447
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "tests.api_tests"
  }, {
    "name" : "suite",
    "value" : "tests_de_bridge"
  }, {
    "name" : "host",
    "value" : "MacBook-Air-Anna.local"
  }, {
    "name" : "thread",
    "value" : "18188-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.api_tests.tests_de_bridge"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "network",
    "value" : "'Avalanche (AVAX)'"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "4f221109da24f628.json",
  "parameterValues" : [ "'Avalanche (AVAX)'" ]
}